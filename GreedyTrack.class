import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class GreedieTrack implements ActionListener {
  final JFileChooser fc = new JFileChooser();
  
  final String chooseFileText = "Please choose a chat file to monitor.";
  
  final int STATUS_PREPARING = 0;
  
  final int STATUS_SAILING = 1;
  
  final int STATUS_BATTLE = 2;
  
  final int STATUS_FRAY = 3;
  
  File chatFile;
  
  PirateCount pirateCountModel = new PirateCount();
  
  PirateCount battleModel = new PirateCount();
  
  JFrame frame = new JFrame("Greedie Tracker 1.2.1");
  
  JLabel fileLabel;
  
  JLabel statusLabel;
  
  JLabel sailingTimeLabel;
  
  JLabel battleTimeLabel;
  
  JLabel frayTimeLabel;
  
  JButton advanceButton;
  
  JTextField pirateAddText;
  
  JTextField rhythm;
  
  JFrame cheat = new JFrame("Greedie Tracker Cheat Window");
  
  JTextField textAddText;
  
  int status;
  
  long sailingTime;
  
  long battleTime;
  
  long frayTime;
  
  int battles;
  
  int battlesWon;
  
  int battlesLost;
  
  String battleRhythm = "";
  
  Pattern setSailPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] (.*?) issued an order to set the vessel to sail.");
  
  Pattern interceptPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] You (have been intercepted by|intercepted) the (.*?)!");
  
  Pattern grapplePattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] (.*?) has grappled (.*?). A melee breaks out between the crews!");
  
  Pattern disengagePattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] (.*?) disengaged from the battle.");
  
  Pattern greediePattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] (.*?)( swings a devious blow against | executes a masterful strike against | delivers an overwhelming barrage against | performs a powerful attack against )(.*?)(, jarring some treasure loose!|, who drops some treasure in surprise!|, causing some treasure to fall from their grip!|, and steals some loot in the process!)");
  
  Pattern frayEndPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] Game over.  Winners: (.*?).");
  
  Pattern frayLostPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] The victors reclaim (.*?) Lavish Lockers that had been stolen during the fight.");
  
  Pattern frayWonPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] Ye received (.*?) pieces of eight as your initial cut of the booty!");
  
  Pattern resetPattern = Pattern.compile("\\[(.*?):(.*?):(.*?)\\] (.*?) (issued an order to put into port.|is dividing the booty.)");
  
  boolean haltLoop = true;
  
  Thread loop = new Thread() {
      public void run() {
        GreedieTrack.this.haltLoop = false;
        GreedieTrack.this.updateTime.start();
        long offset = GreedieTrack.this.chatFile.length();
        while (!GreedieTrack.this.haltLoop) {
          while (GreedieTrack.this.chatFile.length() == offset) {
            try {
              Thread.sleep(500L);
            } catch (InterruptedException interruptedException) {}
          } 
          try {
            RandomAccessFile raf = new RandomAccessFile(GreedieTrack.this.chatFile, "r");
            raf.seek(offset);
            StringBuilder sb = new StringBuilder();
            while (offset < raf.length()) {
              offset++;
              sb.append((char)raf.read());
            } 
            raf.close();
            System.out.print(sb.toString());
            byte b;
            int i;
            String[] arrayOfString;
            for (i = (arrayOfString = sb.toString().split("\n")).length, b = 0; b < i; ) {
              String msg = arrayOfString[b];
              GreedieTrack.this.process(msg);
              b++;
            } 
          } catch (FileNotFoundException e) {
            e.printStackTrace();
          } catch (IOException e) {
            e.printStackTrace();
          } 
        } 
      }
    };
  
  public void process(String str) {
    Matcher greedieMatch = this.greediePattern.matcher(str);
    if (this.status == 0 && this.setSailPattern.matcher(str).find()) {
      System.err.println("We're sailing!");
      advanceStatus(1);
    } else if (this.status == 1 && this.interceptPattern.matcher(str).find()) {
      System.err.println("We're battling!");
      this.battles++;
      advanceStatus(2);
    } else if (this.status == 2 && this.grapplePattern.matcher(str).find()) {
      System.err.println("We're fraying!");
      advanceStatus(3);
    } else if (this.status == 2 && this.disengagePattern.matcher(str).find()) {
      System.err.println("We're disengaging!");
      advanceStatus(1);
    } else if (this.status == 3 && this.frayEndPattern.matcher(str).find()) {
      System.err.println("We're ending the fray!");
      advanceStatus(1);
    } else if (this.status == 1 && this.frayWonPattern.matcher(str).find()) {
      System.err.println("We won the fray!");
      this.battlesWon++;
      this.battleRhythm = this.battleModel.merge(this.pirateCountModel, this.battleRhythm);
      this.rhythm.setText(this.battleRhythm);
      this.frame.invalidate();
    } else if (this.status == 1 && this.frayLostPattern.matcher(str).find()) {
      System.err.println("We lost the fray...");
      this.battlesLost++;
      this.battleModel.reset();
      this.battleRhythm = this.battleModel.merge(this.pirateCountModel, this.battleRhythm);
      this.rhythm.setText(this.battleRhythm);
      this.frame.invalidate();
    } else if (this.status == 3 && greedieMatch.find()) {
      String pirate = greedieMatch.group(4);
      String victim = greedieMatch.group(6);
      System.err.println(String.valueOf(pirate) + " got a greedie!");
      this.battleModel.add(pirate, victim);
    } else if (this.status == 1 && this.resetPattern.matcher(str).find()) {
      System.err.println("We've finished the bash!");
      JFrame aarFrame = new JFrame("Greedie Tracker AAR");
      JTextArea aar = new JTextArea(15, 34);
      aar.setFont(new Font("Courier New", 1, 14));
      aar.setText(getAfterActionReport());
      aarFrame.getContentPane().add(new JScrollPane(aar));
      aarFrame.pack();
      aarFrame.setVisible(true);
      advanceStatus(0);
    } 
  }
  
  public String getAfterActionReport() {
    StringBuilder sb = new StringBuilder("After Action Report\n");
    sb.append(String.valueOf(this.battles) + " battles, " + this.battlesWon + " wins, " + this.battlesLost + " losses.\n");
    sb.append(String.valueOf(this.pirateCountModel.getTotal()) + " total lockers.\n");
    sb.append("Battle Rhythm: " + this.battleRhythm + "\n");
    sb.append(String.valueOf(this.pirateCountModel.getPirateTotals()) + "\n");
    sb.append("Total time:            " + decodeTime(this.sailingTime + this.battleTime + this.frayTime) + "\n");
    sb.append("Average sailing time:  " + decodeTime(this.sailingTime / Math.max(this.battles, 1)) + "\n");
    sb.append("Average battling time: " + decodeTime(this.battleTime / Math.max(this.battles, 1)) + "\n");
    sb.append("Average fray time:     " + decodeTime(this.frayTime / Math.max(this.battles, 1)));
    return sb.toString();
  }
  
  Thread updateTime = new Thread() {
      public void run() {
        while (!GreedieTrack.this.haltLoop) {
          try {
            Thread.sleep(1000L);
          } catch (InterruptedException interruptedException) {}
          if (!GreedieTrack.this.haltLoop) {
            switch (GreedieTrack.this.status) {
              case 1:
                GreedieTrack.this.sailingTime++;
                break;
              case 2:
                GreedieTrack.this.battleTime++;
                break;
              case 3:
                GreedieTrack.this.frayTime++;
                break;
            } 
            GreedieTrack.this.sailingTimeLabel.setText(GreedieTrack.decodeTime(GreedieTrack.this.sailingTime));
            GreedieTrack.this.battleTimeLabel.setText(GreedieTrack.decodeTime(GreedieTrack.this.battleTime));
            GreedieTrack.this.frayTimeLabel.setText(GreedieTrack.decodeTime(GreedieTrack.this.frayTime));
          } 
        } 
      }
    };
  
  private static String decodeTime(long time) {
    int hours = (int)(time / 3600L);
    int mins = (int)((time - (hours * 3600)) / 60L);
    long seconds = time - (hours * 3600) - (mins * 60);
    return String.format("%02d:%02d:%02d", new Object[] { Integer.valueOf(hours), Integer.valueOf(mins), Long.valueOf(seconds) });
  }
  
  public static void main(String[] args) {
    GreedieTrack theApp = new GreedieTrack();
  }
  
  public GreedieTrack() {
    this.frame.setLayout(new BorderLayout());
    this.frame.setMinimumSize(new Dimension(285, 350));
    this.frame.setDefaultCloseOperation(3);
    JPanel top = new JPanel();
    top.setLayout(new BorderLayout());
    JPanel config = new JPanel();
    JButton fileButton = new JButton("Chat File...");
    fileButton.setActionCommand("chatFile");
    fileButton.addActionListener(this);
    this.fileLabel = new JLabel("Please choose a chat file to monitor.");
    config.add(fileButton);
    config.add(this.fileLabel);
    top.add(config, "North");
    this.rhythm = new JTextField();
    top.add(this.rhythm, "South");
    this.frame.add(top, "North");
    if ((new File("chatfile.txt")).exists())
      try {
        BufferedReader br = new BufferedReader(new FileReader("chatfile.txt"));
        this.chatFile = new File(br.readLine());
        System.out.println("Opening: " + this.chatFile.getName() + ".");
        this.fileLabel.setText(this.chatFile.getName());
        this.loop.start();
      } catch (FileNotFoundException e) {
        e.printStackTrace();
      } catch (IOException e) {
        e.printStackTrace();
      }  
    JPanel counts = new JPanel();
    counts.setLayout(new BorderLayout());
    JList pirateCount = new JList(this.pirateCountModel);
    pirateCount.setBackground(new Color(197, 199, 174));
    pirateCount.setFont(new Font("Courier New", 1, 14));
    JScrollPane pirateScroll = new JScrollPane(pirateCount);
    pirateScroll.setBorder(BorderFactory.createBevelBorder(1));
    pirateScroll.setPreferredSize(new Dimension(100, 100));
    counts.add(pirateScroll, "Center");
    JPanel battlePanel = new JPanel();
    battlePanel.setLayout(new BorderLayout());
    battlePanel.add(new JLabel("This Battle:"), "North");
    JList battleCount = new JList(this.battleModel);
    battleCount.setBackground(new Color(197, 199, 174));
    battleCount.setFont(new Font("Courier New", 1, 14));
    JScrollPane battleScroll = new JScrollPane(battleCount);
    battleScroll.setBorder(BorderFactory.createBevelBorder(1));
    battleScroll.setPreferredSize(new Dimension(100, 100));
    battlePanel.add(battleScroll, "Center");
    counts.add(battlePanel, "South");
    this.frame.add(counts, "Center");
    JPanel rightSide = new JPanel();
    rightSide.setLayout(new BorderLayout());
    this.statusLabel = new JLabel("Preparing.");
    this.statusLabel.setBackground(new Color(212, 172, 140));
    this.statusLabel.setOpaque(true);
    this.statusLabel.setBorder(BorderFactory.createLineBorder(new Color(140, 140, 40), 2, true));
    rightSide.add(this.statusLabel, "North");
    JPanel timing = new JPanel();
    timing.setLayout(new BoxLayout(timing, 3));
    timing.setPreferredSize(new Dimension(100, 100));
    timing.setOpaque(true);
    timing.setBackground(new Color(106, 129, 156));
    JLabel sailingLabelLabel = new JLabel("Sailing:");
    this.sailingTimeLabel = new JLabel("00:00:00");
    sailingLabelLabel.setForeground(new Color(10, 190, 190));
    this.sailingTimeLabel.setForeground(new Color(20, 240, 240));
    JLabel battleLabelLabel = new JLabel("Battle:");
    this.battleTimeLabel = new JLabel("00:00:00");
    battleLabelLabel.setForeground(new Color(190, 180, 10));
    this.battleTimeLabel.setForeground(new Color(230, 220, 20));
    JLabel frayLabelLabel = new JLabel("Fray:");
    this.frayTimeLabel = new JLabel("00:00:00");
    frayLabelLabel.setForeground(new Color(230, 120, 120));
    this.frayTimeLabel.setForeground(new Color(250, 140, 140));
    timing.add(new JLabel(" "));
    timing.add(sailingLabelLabel);
    timing.add(this.sailingTimeLabel);
    timing.add(new JLabel(" "));
    timing.add(battleLabelLabel);
    timing.add(this.battleTimeLabel);
    timing.add(new JLabel(" "));
    timing.add(frayLabelLabel);
    timing.add(this.frayTimeLabel);
    rightSide.add(timing, "Center");
    JPanel control = new JPanel();
    control.setLayout(new BorderLayout());
    JButton resetButton = new JButton("Reset/End");
    resetButton.setActionCommand("reset");
    resetButton.addActionListener(this);
    control.add(resetButton, "South");
    this.advanceButton = new JButton("Set Sailing");
    this.advanceButton.setActionCommand("advance");
    this.advanceButton.addActionListener(this);
    control.add(this.advanceButton, "North");
    rightSide.add(control, "South");
    this.frame.add(rightSide, "East");
    this.frame.pack();
    this.frame.setVisible(true);
    JPanel textAdd = new JPanel();
    textAdd.setLayout(new BorderLayout());
    JButton textButton = new JButton("Process");
    textButton.setActionCommand("text");
    textButton.addActionListener(this);
    textAdd.add(textButton, "East");
    this.textAddText = new JTextField(50);
    textAdd.add(this.textAddText, "Center");
    this.cheat.add(textAdd, "Center");
    JPanel pirateAdd = new JPanel();
    pirateAdd.setLayout(new BorderLayout());
    JButton addButton = new JButton("Add");
    addButton.setActionCommand("add");
    addButton.addActionListener(this);
    pirateAdd.add(addButton, "South");
    this.pirateAddText = new JTextField();
    pirateAdd.add(this.pirateAddText, "Center");
    this.cheat.add(pirateAdd, "East");
    this.cheat.pack();
  }
  
  private void advanceStatus(int status) {
    this.status = status;
    switch (status) {
      case 0:
        this.sailingTime = 0L;
        this.battleTime = 0L;
        this.frayTime = 0L;
        this.battleRhythm = "";
        this.battles = 0;
        this.battlesWon = 0;
        this.battlesLost = 0;
        this.advanceButton.setText("Set Sailing");
        this.statusLabel.setText("Preparing.");
        this.rhythm.setText("");
        this.pirateCountModel.reset();
        break;
      case 3:
        this.advanceButton.setText("Set Sailing");
        this.statusLabel.setText("Fraying.");
        break;
      case 1:
        this.advanceButton.setText("Set Battling");
        this.statusLabel.setText("Sailing.");
        break;
      case 2:
        this.advanceButton.setText("Set Fray");
        this.statusLabel.setText("Battling.");
        break;
    } 
  }
  
  public void actionPerformed(ActionEvent arg0) {
    if (arg0.getActionCommand().equals("chatFile")) {
      if (this.fc.showOpenDialog(this.frame) == 0) {
        this.chatFile = this.fc.getSelectedFile();
        try {
          BufferedWriter bw = new BufferedWriter(new FileWriter("chatfile.txt"));
          bw.write(this.chatFile.getAbsolutePath());
          bw.close();
        } catch (IOException e) {
          e.printStackTrace();
        } 
        System.out.println("Opening: " + this.chatFile.getName() + ".");
        this.fileLabel.setText(this.chatFile.getName());
        this.loop.start();
      } 
    } else if (arg0.getActionCommand().equals("advance")) {
      switch (this.status) {
        case 0:
        case 3:
          advanceStatus(1);
          break;
        case 1:
          advanceStatus(2);
          break;
        case 2:
          advanceStatus(3);
          break;
      } 
    } else if (arg0.getActionCommand().equals("add")) {
      this.pirateCountModel.add(this.pirateAddText.getText(), "Test Victim");
    } else if (arg0.getActionCommand().equals("text")) {
      process(this.textAddText.getText());
      this.textAddText.setText("");
    } else if (arg0.getActionCommand().equals("reset")) {
      advanceStatus(0);
    } 
  }
}
